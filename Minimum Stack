package edu.princeton.cs.algs4;

import edu.princeton.cs.algs4.StdOut;
import java.util.NoSuchElementException;


public class MinimumStack {
    int size;
    Node last;
    Node last_num;
    Node head = new Node();

    public void push(int a) {
        Node node = new Node();
        node.item = a;
        if (isEmpty()) {
            Node nodemin = new Node();
            nodemin.item = a;
            last = node;
            last_num = nodemin;
            head.next = last;
            last.prev = head;
            } 
        else {
            int min = last_num.item;
            if (a < min) {
                Node nodemin = new Node();
                nodemin.item = a;
                last_num.next = nodemin;
                nodemin.prev = last_num;
            } else {
                Node newMin = new Node();
                newMin.item = min;
                last_num.next = newMin;
                newMin.prev = last_num;
            }

            last.next = node;
            node.prev = last;
            last = last.next;
            last_num = last_num.next;
        }
        size++;
    }

    public int pop() {
        if (isEmpty())
            throw new NoSuchElementException();
        int rt = last.item;
        last = last.prev;
        last_num = last_num.prev;
        size--;
        return rt;
    }

    public int peek() {
        return last.item;
    }

    public int min() {
        return last_num.item;
    }

    public String toString() {
        StringBuilder sb = new StringBuilder();
        Node temp = head.next;
        while (temp != null) {
            sb.append(temp.item + " ");
            temp = temp.next;
        }
        return sb.toString();
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public int size() {
        return size;
    }

    private class Node {
        int item;
        Node prev;
        Node next;
    }


public static void main(String[] args) {
    MinimumStack stack = new MinimumStack();
    MinimumStack aux_stack = new MinimumStack();
    	int choiceentry = 0;

    	while (choiceentry != 4)
    	{
    	    StdOut.println("Menu:\n"
    	    		+ "1 - Push an item\n"
    	    		+ "2 - Pop an item\n"
    	    		+ "3 - Get the Minimum item\n"
    	    		+ "4 - Exit\n"
    	    		+ "Choice:");
    	    
    	    choiceentry = StdIn.readInt();
    	    int number;
    		switch (choiceentry)
    	    {
    	        case 1:
    	        	System.out.println("Item to push:");
    	        	number = StdIn.readInt();
    	            stack.push(number);
    	            break;
    	        case 2: 
    	        	System.out.println("Poped Item:" + stack.pop());
    	        	break;
    	        case 3: 
    	        	System.out.println("Minimum Item:" + stack.min());
    	            aux_stack.push(stack.min());
    	        	break;
    }
        	StdOut.println("The first stack:" + stack);
            StdOut.println("The second stack:" + aux_stack);   
    }

}}
